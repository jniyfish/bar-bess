import socket


##### Add Virtual Port ######
#Add Access and Core Port
#access_if = VPort(ifname='eth_access', ip_addrs=['10.100.100.10/24'])
#core_if = VPort(ifname='eth_core', ip_addrs=['10.0.100.1/24'])

##### Add Phy Port #####
access_if::PMDPort(pci='0000:83:00.1', num_inc_q=1, num_out_q=1)
core_if2::PMDPort(pci='0000:83:00.2', num_inc_q=1, num_out_q=1)
core_if::PMDPort(pci='0000:83:00.3', num_inc_q=1, num_out_q=1)
bess.add_worker(wid=0, core=16)
bess.add_worker(wid=1, core=17)
bess.add_worker(wid=2, core=18)

def aton(ip):
    return socket.inet_aton(ip)

###########################################
#              Gate Index                 #
###########################################
BPF_forward = 0
BPF_drop = 1 
pdr_forward = 0
pdr_buffer = 1
pdr_drop = 2
qerGreenGate = 1
qerYellowGate = 2
qerRedGate = 3
qerFailGate = 4
qerStatusDropGate = 5
qerUnmeteredGate = 6

###########################################
#              Add worker                 #
###########################################


###########################################
#              UL Pipe Line               #
###########################################
ulPort::PortInc(port=access_if)\
    -> ulBPF::BPF():BPF_forward \
    -> ulPktParse::GtpuParser():1 \
    -> pdrLookup::ExactMatch(fields=[{'attr_name':'teid', 'num_bytes':4}, \
                                        {'attr_name':'src_ip', 'num_bytes':4}], \
                                values=[{'attr_name':'pdr_id', 'num_bytes':4}, \
                                        {'attr_name':'far_id', 'num_bytes':4}]\
                                        ):pdr_forward \
    -> farLookup::ExactMatch(fields=[{'attr_name':'far_id', 'num_bytes':4}], \
                             values=[{'attr_name':'action', 'num_bytes':1}], \
                                        ):pdr_forward \
    -> farExecute::ExactMatch(fields=[{'attr_name':'action', 'num_bytes':1}]):pdr_forward \
    -> gtpuDecap::GtpuDecap() \
    ->  setEthernet::SetMetadata(attrs=[
        {'name': 'ether_src', 'size': 6, 'value_int': 0x04d9f57d9c5e}, \
        {'name': 'ether_dst', 'size': 6, 'value_int': 0x3cfdfebafad1}, \
        {'name': 'ether_type', 'size': 2, 'value_int': 0x0800}]) \
        -> EtherEncap() \
    -> PortOut(port=core_if)


# Drop Packets
pdrLookup:1 -> Sink()
pdrLookup.set_default_gate(gate=1)
farLookup:1 -> Sink()

# 1: forwarding, 2: drop, 3: buffer

# BPF Rules Session
check_ip = "ip"
check_upf_ip = " and dst host 10.100.100.10"
check_gtpu_port =" and udp dst port 2152"
uplink_filter = {"priority": 1, "filter": check_ip +
               check_upf_ip + check_gtpu_port, "gate": 0}
ulBPF.add(filters=[uplink_filter])


###########################################
#              DL Pipe Line               #
###########################################

dlPort0::PortInc(port=core_if2) -> dMerger::Merge()
dlPort::PortInc(port=core_if) \
    -> dMerger \
    -> dlPktParse::GtpuParser():1 \
    -> pdrDlLookup::ExactMatch(fields=[{'attr_name':'dst_ip', 'num_bytes':4}], \
                                values=[{'attr_name':'pdr_id', 'num_bytes':4}, \
                                        {'attr_name':'far_id', 'num_bytes':4}, \
                                        {'attr_name':'farid', 'num_bytes':4}, \
                                        {'attr_name':'qerid', 'num_bytes':4} \
                                        ]\
                                        ):pdr_forward \
    -> farDlLookup::ExactMatch(fields=[{'attr_name':'far_id', 'num_bytes':4}], \
                             values=[{'attr_name':'action', 'num_bytes':1}, \
                                     {'attr_name':'tunnel_out_src_ip4addr', 'num_bytes':4}, \
                                     {'attr_name':'tunnel_out_dst_ip4addr', 'num_bytes':4}, \
                                     {'attr_name':'tunnel_out_teid', 'num_bytes':4}, \
                                     {'attr_name':'tunnel_out_udp_port', 'num_bytes':2}],\
                                    ):pdr_forward \
    -> farDlExecute::ExactMatch(fields=[{'attr_name':'action', 'num_bytes':1}]):pdr_forward \
    -> dlFarMerge::Bypass() \
    -> gtpuEncap::GtpuEncap():1 \
    ->  setEthernet2::SetMetadata(attrs=[
        {'name': 'ether_src', 'size': 6, 'value_int': 0x04d9f57d9c5f}, \
        {'name': 'ether_dst', 'size': 6, 'value_int': 0x4e10b03a6f85}, \
        {'name': 'ether_type', 'size': 2, 'value_int': 0x0800}]) \
    -> EtherEncap() \
    -> qerDlLookup::Qos(fields=[{'attr_name':'qerid', 'num_bytes':4}], \
        )

qerDlLookup:qerGreenGate -> gMerge::Merge()
qerDlLookup:qerYellowGate -> yMerge::Merge()
qerDlLookup:qerRedGate -> sessionQERMeterRed::Sink()
qerDlLookup:qerStatusDropGate -> sessionQERStatusDrop::Sink()
qerDlLookup:qerUnmeteredGate -> yMerge
qerDlLookup.set_default_gate(gate=qerUnmeteredGate)

yMerge -> limit::Queue()
#    -> SetMetadata(attrs=[{'name': 'qerid', 'size': 4, 'value_int': 0}]) \
#    -> limit::Qos(fields=[{'attr_name':'qerid', 'num_bytes':4}],)


#limit:qerGreenGate  -> gMerge
#limit:qerYellowGate  -> gMerge
#limit:qerUnmeteredGate  -> gMerge
#limit:qerRedGate -> s1::Sink()
#limit:qerStatusDropGate -> s2::Sink()
limit-> gMerge
gMerge \
    -> outerUDPCsum::L4Checksum() \
    -> outerIPCsum::IPChecksum() \
    -> PortOut(port=access_if)

farDlExecute:1 -> dlFarMerge
farDlExecute:2 -> Sink()
ulPort.attach_task(wid=0)
dlPort.attach_task(wid=1)
dlPort0.attach_task(wid=2)

bess.add_tc('fast', policy='rate_limit', resource='bit', limit={'bit': 8000000000})
limit.attach_task('fast')
#Defaulte farExecute Action Rules
# 1: forward
# 2: buffer
# 3: drop 
farDlExecute.add(fields=[{'value_int':1}], gate=0)
farDlExecute.add(fields=[{'value_int':2}], gate=1)
farDlExecute.add(fields=[{'value_int':3}], gate=2)
farExecute.add(fields=[{'value_int':1}], gate=0)
farExecute.add(fields=[{'value_int':2}], gate=1)
farExecute.add(fields=[{'value_int':3}], gate=1)
#Add UDP Socket to PFCP Agent
#buffer.add_socket(pfcpAgentAddr='140.113.194.239')

# Drop Packets
pdrDlLookup:1 -> Sink()
pdrDlLookup.set_default_gate(gate=1)
farDlLookup:1 -> Sink()



###TESTING###
#buffer.add(farid=2)
#buffer.add(farid=33554432)
#Defaulte Flow Rules For testing 
#Session1
pdrDlLookup.add(fields= [{'value_bin':aton('60.60.0.1')}] \
                , values =[{'value_int':2}, {'value_int':2}, {'value_int':2}, {'value_int':2}] \
                , gate=0)
farDlLookup.add(fields=[{'value_bin':"\002\000\000\000"}], \
                values=[{'value_int':1}, \
                {'value_bin': aton('10.100.100.10')}, \
                {'value_bin': aton('1.100.100.10')}, \
                {'value_bin': aton('1.0.0.0')}, \
                {'value_bin': '\x68\x08'}] \
                , gate=0)
pdrLookup.add(fields= [{'value_bin':aton('0.0.0.1')}, {'value_bin':aton('60.60.0.1')}] \
                , values =[{'value_int':1}, {'value_int':1}] \
                , gate=0)
farLookup.add(fields=[{'value_int':1}], \
                values=[{'value_int':1}] \
                , gate=0)
#Session2
pdrDlLookup.add(fields= [{'value_bin':aton('60.60.0.2')}] \
                , values =[{'value_int':4}, {'value_int':4}, {'value_int':4}, {'value_int':4}] \
                , gate=0)
farDlLookup.add(fields=[{'value_bin':"\004\000\000\000"}], \
                values=[{'value_int':1}, \
                {'value_bin': aton('10.100.100.10')}, \
                {'value_bin': aton('2.100.100.10')}, \
                {'value_bin': aton('2.0.0.0')}, \
                {'value_bin': '\x68\x08'}] \
                , gate=0)
pdrLookup.add(fields= [{'value_bin':aton('0.0.0.2')}, {'value_bin':aton('60.60.0.2')}] \
                , values =[{'value_int':3}, {'value_int':3}] \
                , gate=0)
farLookup.add(fields=[{'value_int':3}], \
                values=[{'value_int':1}] \
                , gate=0)

#QoS
qerDlLookup.add(gate=0, cbs=1342177280, pbs=1342177280, ebs=0, cir=125000000, pir=400000000, fields= [{'value_int':2}])
#limit.add(gate=0, cbs=671088640, pbs=671088640, ebs=0, cir=10, pir=800000000, fields= [{'value_int':0}])