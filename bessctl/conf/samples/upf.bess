import socket


##### Add Virtual Port ######
#Add Access Port
#access_if = VPort(ifname='eth_access', ip_addrs=['10.100.100.10/24'])
#Add Core Port
#core_if = VPort(ifname='eth_core', ip_addrs=['10.0.100.1/24'])
##### Add Virtual Port ######

##### Add Phy Port #####
access_if::PMDPort(pci='0000:83:00.1', num_inc_q=1, num_out_q=1)
core_if::PMDPort(pci='0000:83:00.3', num_inc_q=1, num_out_q=1)
bess.add_worker(wid=0, core=16)
bess.add_worker(wid=1, core=17)
bess.add_worker(wid=2, core=18)
##### Add Phy Port #####

#PortInc(port=host_if) -> PortOut(port=container_if)

def aton(ip):
    return socket.inet_aton(ip)

###########################################
#              Gate Index                 #
###########################################
BPF_forward = 0
BPF_drop = 1 
pdr_forward = 0
pdr_buffer = 1
pdr_drop = 2

###########################################
#              Add worker                 #
###########################################


###########################################
#              UL Pipe Line               #
###########################################
p1::PortInc(port=access_if)\
    -> ulBPF::BPF():BPF_forward \
    -> ulPktParse::GtpuParser():1 \
    -> pdrLookup::ExactMatch(fields=[{'attr_name':'teid', 'num_bytes':4}, \
                                        {'attr_name':'src_ip', 'num_bytes':4}], \
                                values=[{'attr_name':'pdr_id', 'num_bytes':4}, \
                                        {'attr_name':'far_id', 'num_bytes':4}]\
                                        ):pdr_forward \
    -> farLookup::ExactMatch(fields=[{'attr_name':'far_id', 'num_bytes':4}], \
                             values=[{'attr_name':'action', 'num_bytes':1}], \
                                        ):pdr_forward \
    -> farExecute::ExactMatch(fields=[{'attr_name':'action', 'num_bytes':1}]):pdr_forward \
    -> gtpuDecap::GtpuDecap() \
    -> ulIpRouting::ExactMatch(fields=[{'attr_name':'dst_ip', 'num_bytes':4}], \
                                values=[{'attr_name':'ether_src', 'num_bytes':6}, \
                                        {'attr_name':'ether_dst', 'num_bytes':6},
                                        {'attr_name':'ether_type', 'num_bytes':2}]\
                                        ):pdr_forward \
    -> EtherEncap() \
    -> PortOut(port=core_if)


# Drop Packets
pdrLookup:1 -> Sink()
pdrLookup.set_default_gate(gate=1)
farLookup:1 -> Sink()

# 1: forwarding, 2: drop, 3: buffer

# BPF Rules Session
check_ip = "ip"
check_upf_ip = " and dst host 10.100.100.10"
check_gtpu_port =" and udp dst port 2152"
uplink_filter = {"priority": 1, "filter": check_ip +
               check_upf_ip + check_gtpu_port, "gate": 0}
ulBPF.add(filters=[uplink_filter])


###########################################
#              DL Pipe Line               #
###########################################


p2::PortInc(port=core_if) \
    -> dlPktParse::GtpuParser():1 \
    -> pdrDlLookup::ExactMatch(fields=[{'attr_name':'dst_ip', 'num_bytes':4}], \
                                values=[{'attr_name':'pdr_id', 'num_bytes':4}, \
                                        {'attr_name':'far_id', 'num_bytes':4}, \
                                        {'attr_name':'fseid', 'num_bytes':8}
                                        ]\
                                        ):pdr_forward \
    -> farDlLookup::ExactMatch(fields=[{'attr_name':'far_id', 'num_bytes':4}], \
                             values=[{'attr_name':'action', 'num_bytes':1}, \
                                     {'attr_name':'tunnel_out_src_ip4addr', 'num_bytes':4}, \
                                     {'attr_name':'tunnel_out_dst_ip4addr', 'num_bytes':4}, \
                                     {'attr_name':'tunnel_out_teid', 'num_bytes':4}, \
                                     {'attr_name':'tunnel_out_udp_port', 'num_bytes':2}],\
                                    ):pdr_forward \
    -> farDlExecute::ExactMatch(fields=[{'attr_name':'action', 'num_bytes':1}]):pdr_forward \
    -> dlFarMerge::Merge() \
    -> gtpuEncap::GtpuEncap():1 \
    -> dlIpRouting::ExactMatch(fields=[{'attr_name':'tunnel_out_dst_ip4addr', 'num_bytes':4}], \
                                values=[{'attr_name':'ether_src', 'num_bytes':6}, \
                                        {'attr_name':'ether_dst', 'num_bytes':6},
                                        {'attr_name':'ether_type', 'num_bytes':2}]\
                                        ):pdr_forward \
    -> EtherEncap() \
    -> outerUDPCsum::L4Checksum() \
    -> outerIPCsum::IPChecksum() \
    -> PortOut(port=access_if)

farDlExecute:1 -> buffer::Buffer() -> dlFarMerge
#farDlExecute:1 -> dlFarMerge
farDlExecute:2 -> Sink()
p1.attach_task(wid=0)
p2.attach_task(wid=1)
buffer.attach_task(wid=2)
#Defaulte farExecute Action Rules
# 1: forward
# 2: buffer
# 3: drop 
farDlExecute.add(fields=[{'value_int':1}], gate=1)
farDlExecute.add(fields=[{'value_int':2}], gate=1)
farDlExecute.add(fields=[{'value_int':3}], gate=2)
farExecute.add(fields=[{'value_int':1}], gate=0)
farExecute.add(fields=[{'value_int':2}], gate=1)
farExecute.add(fields=[{'value_int':3}], gate=1)
#Add UDP Socket to PFCP Agent
buffer.add_socket(pfcpAgentAddr='140.113.194.239')

# Drop Packets
pdrDlLookup:1 -> Sink()
pdrDlLookup.set_default_gate(gate=1)
farDlLookup:1 -> Sink()



###TESTING###
#buffer.add(farid=2)
#buffer.add(farid=33554432)
#Defaulte Flow Rules For testing 
#pdrDlLookup.add(fields= [{'value_bin':aton('60.60.0.1')}] \
#                , values =[{'value_int':2}, {'value_int':2}, {'value_int':2}] \
#                , gate=0)
#farDlLookup.add(fields=[{'value_bin':"\002\000\000\000"}], \
#                values=[{'value_int':1}, \
#                {'value_bin': aton('10.100.100.10')}, \
#                {'value_bin': aton('1.100.100.10')}, \
#                {'value_bin': aton('1.0.0.0')}, \
#                {'value_bin': '\x68\x08'}] \
#                , gate=0)
#pdrLookup.add(fields= [{'value_bin':aton('0.0.0.1')}, {'value_bin':aton('60.60.0.1')}] \
#                , values =[{'value_int':1}, {'value_int':1}] \
#                , gate=0)
#farLookup.add(fields=[{'value_int':1}], \
#                values=[{'value_int':1}] \
#                , gate=0)